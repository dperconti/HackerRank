# You are in charge of a display advertising program. Your ads are displayed on websites all over the internet. You have some CSV input data that counts how many times that users have clicked on an ad on each individual domain. Every line consists of a click count and a domain name, like this:

counts = [ "900,google.com",
     "60,mail.yahoo.com",
     "10,mobile.sports.yahoo.com",
     "40,sports.yahoo.com",
     "300,yahoo.com",
     "10,stackoverflow.com",
     "20,overflow.com",
     "2,en.wikipedia.org",
     "1,m.wikipedia.org",
     "1,mobile.sports",
     "1,google.co.uk"]

# Write a function that takes this input as a parameter and returns a data structure containing the number of clicks that were recorded on each domain AND each subdomain under it. For example, a click on "mail.yahoo.com" counts toward the totals for "mail.yahoo.com", "yahoo.com", and "com". (Subdomains are added to the left of their parent domain. So "mail" and "mail.yahoo" are not valid domains. Note that "mobile.sports" appears as a separate domain near the bottom of the input.)

# Sample output (in any order/format):

# calculateClicksByDomain(counts)
# 1340    com
#  900    google.com
#   10    stackoverflow.com
#   20    overflow.com
#  410    yahoo.com
#   60    mail.yahoo.com
#   10    mobile.sports.yahoo.com
#   50    sports.yahoo.com
#    3    org
#    3    wikipedia.org
#    2    en.wikipedia.org
#    1    t.google.org
#    1    m.google.org
#    1    mobile.sports
#    1    sports
#    1    uk
#    1    co.uk
#    1    google.co.uk


"""
- list of strings
- these strings follow the pattern: a.b.c
- count left after splitting at period (total sum)

Create a hashmap (dict)
Iterate through each string in the array
- Split the string into the subdomains
- take the count (number), add that count to the key (subdmains)

- Assume input will be valid, no validation

- iterated index over the length of the subdomain array
a[-1:]
a[2 -> 1]
a[3 -> 1]
['test', 'google', 'com']
"""
def calculateClicksByDomain(counts):
    d = {}
    # iterating through whole array
    for s in counts:
        # get the count at the beginning of the string
        c = s.split(",")
        count = c[0]
        
        # get the rest of the domain
        s = c[1].split(".")
        # iteration is dependent on length of the string ("1.2.3.4")
        for i in range(len(s)):
            sub = '.'.join(s[i:])   
            # TODO: optimize
            if sub in d:
                d[sub] += int(count)
            else:
                d[sub] = int(count)
    return d

# assert(calculateClicksByDomain(["900,test.google.com"]) == {"com": 900, "google.com": 900, "test.google.com": 900})
# assert(calculateClicksByDomain([ "900,google.com",
#      "60,mail.yahoo.com",
#      "10,mobile.sports.yahoo.com",
#      "40,sports.yahoo.com",
#      "300,yahoo.com",
#      "10,stackoverflow.com",
#      "20,overflow.com",
#      "2,en.wikipedia.org",
#      "1,m.wikipedia.org",
#      "1,mobile.sports",
#      "1,google.co.uk"]) == {"com": 910, "yahoo.com": 910})



# We have some clickstream data that we gathered on our client's website. Using cookies, we collected snippets of users' anonymized URL histories while they browsed the site. The histories are in chronological order and no URL was visited more than once per person.

# Write a function that takes two users' browsing histories as input and returns the longest contiguous sequence of URLs that appears in both.

# Sample input:

user0 = ["/start", "/pink", "/register", "/orange", "/red", "a"]
user1 = ["/start", "/green", "/blue", "/pink", "/register", "/orange", "/one/two"]
user2 = ["a", "/one", "/two"]
user3 = ["/red", "/orange", "/yellow", "/green", "/blue", "/purple", "/white", "/amber", "/HotRodPink", "/BritishRacingGreen"]

user4 = ["/red", "/orange", "/amber", "/green", "/blue", "/purple", "/white", "/lavender", "/HotRodPink", "/BritishRacingGreen"]


# ["green", blue, purple, white]
user5 = ["a"]

def findContiguousHistory(user0, user1):
    response = [[]]
    s = []
    idx = 0
    for v in user0:
        if v in user1:
            u1i = user1.index(v)
            print(u1i, idx + 1)
            if u1i == idx + 1:
                s.append(v)
            else:
                if not s:
                    response.append([v])
                else:
                    response.append(s)
            idx = u1i
        else:
            response.append(s)
            if len(s) > 1:
                s = [v]
    print(max(response, key=len))
        
        
findContiguousHistory(user4, user3)


"""

If no contiguous history, return first element from both

      red

"""

# Sample output:

# findContiguousHistory(user0, user1)
#    /pink
#    /register
#    /orange

# findContiguousHistory(user1, user2)
#    (empty)

# findContiguousHistory(user2, user0)
#    a 

# findContiguousHistory(user5, user2)
#    a 

# findContiguousHistory(user3, user4)
#    /green
#    /blue
#    /purple
#    /white

# findContiguousHistory(user4, user3)
#    /green
#    /blue
#    /purple
#    /white
